generator client {
  provider = "prisma-client-js"
}

// PRODUCTION
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Local
// datasource db {
//    provider = "mysql"
//    url      = env("DATABASE_URL")
//  }

enum Role {
  MODERATEUR
  ADMINISTRATEUR
}

enum Status {
  CREE
  OUVERT
  FERME
}

enum Devise {
  EURO
  DOLLAR
  DOLLAR_CANADIAN
  LIVRE
  YEN
  ROUPIE
  ARIARY
}

enum EtapeActuelle {
  SOUMIS
  EN_REVISION
  ACCEPTE
  REJETE
}

enum SourceSite {
  LINKEDIN
  INDEED
  JOOBLE
  FRANCETRAVAIL
  MESSAGER
  WHATSAPP
  INSTAGRAM
  TELEGRAM
  TWITTER
  QUEBEC_SITE
}

enum StatutReferent {
  APPROUVE
  NON_APPROUVE
}

enum TypeProcessus {
  TACHE
  VISIO_CONFERENCE
  QUESTIONNAIRE
}

enum TypeEmploi {
  CDD
  CDI
  STAGE
}

enum StatutProcessus {
  A_VENIR
  EN_COURS
  TERMINER
  ANNULER
}

enum StatutProcessusPasser {
  EN_COURS
  TERMINER
}

enum TypeTemps {
  PLEIN_TEMPS
  TEMPS_PARTIEL
}

enum SupportRequestStatus {
  EN_ATTENTE
  EN_COURS
  RESOLU
  REJETE
}

model User {
  id               Int                           @id @default(autoincrement())
  name             String
  email            String                        @unique
  password         String
  phone            String
  profile          String                        @default("profile.png")
  role             Role                          @default(MODERATEUR)
  is_active        Boolean                       @default(false)
  is_verified      Boolean                       @default(false)
  created_at       DateTime                      @default(now())
  updated_at       DateTime                      @updatedAt
  offres           Offre[]                       @relation("UserOffres")
  otp_verfication  OtpVerification[]
  remarques        Remarque[]                    @relation("RemarqueAdmin")
  organisations    Organisation[]                @relation("UserOrganisations")
  invitations_sent QueueInvitationOrganisation[] @relation("Inviter")
}

model Organisation {
  id              Int                           @id @default(autoincrement())
  nom             String
  adresse         String                        @default("")
  ville           String                        @default("")
  users           User[]                        @relation("UserOrganisations")
  offres          Offre[]                       @relation("OrganisationOffres")
  created_at      DateTime                      @default(now())
  updated_at      DateTime                      @updatedAt
  postcarieres    PostCarriere[]                @relation("OrganisationPostCarieres")
  queueinvitation QueueInvitationOrganisation[] @relation("QueueInvitationOrganisation")

  @@unique([nom, adresse, ville])
}

model QueueInvitationOrganisation {
  id              Int           @id @default(autoincrement())
  inviter_id      Int
  invitee_email   String
  organisation_id Int?
  role            Role          @default(MODERATEUR)
  token           String        @unique
  expires_at      DateTime
  created_at      DateTime      @default(now())
  inviter         User          @relation("Inviter", fields: [inviter_id], references: [id], onDelete: Cascade)
  organisation    Organisation? @relation("QueueInvitationOrganisation", fields: [organisation_id], references: [id], onDelete: Cascade)
}

model PostCarriere {
  id              Int          @id @default(autoincrement())
  titre           String
  contenu         String
  images          String[]
  organisation    Organisation @relation("OrganisationPostCarieres", fields: [organisation_id], references: [id], onDelete: Cascade)
  organisation_id Int
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model Offre {
  id                Int           @id @default(autoincrement())
  titre             String        @default("")
  user              User          @relation("UserOffres", fields: [user_id], references: [id], onDelete: Cascade)
  user_id           Int
  organisation      Organisation  @relation("OrganisationOffres", fields: [organisation_id], references: [id], onDelete: Cascade)
  organisation_id   Int
  image_url         String        @default("")
  description       String
  date_limite       DateTime
  status            Status
  nombre_requis     Int           @default(1)
  lieu              String
  pays              String
  type_emploi       TypeEmploi    @default(CDD)
  type_temps        TypeTemps     @default(PLEIN_TEMPS)
  salaire           Decimal
  devise            Devise
  horaire_ouverture String
  horaire_fermeture String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  postulations      Postulation[] @relation("OffrePostulations")
  processus         Processus[]   @relation("OffreProcessus")
}

model Candidat {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  nom             String
  is_email_active Boolean            @default(false)
  telephone       String?
  image           String             @default("uploads/candidats/default.png")
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  postulations    Postulation[]      @relation("CandidatPostulations")
  referents       CandidatReferent[] @relation("CandidatToReferent")
}

model Postulation {
  id                Int               @id @default(autoincrement())
  candidat          Candidat          @relation("CandidatPostulations", fields: [candidat_id], references: [id], onDelete: Cascade)
  candidat_id       Int
  offre             Offre             @relation("OffrePostulations", fields: [offre_id], references: [id], onDelete: Cascade)
  offre_id          Int
  date_soumission   DateTime          @default(now())
  etape_actuelle    EtapeActuelle     @default(SOUMIS)
  cv                String
  lettre_motivation String?
  telephone         String?
  source_site       SourceSite        @default(LINKEDIN)
  note              Int               @default(0)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  remarques         Remarque[]        @relation("RemarquePostulation")
  processus_passer  ProcessusPasser[] @relation("ProcessusPasserPostulation")

  @@unique([candidat_id, offre_id])
}

model Referent {
  id             Int                @id @default(autoincrement())
  email          String             @unique
  nom            String
  telephone      String
  recommendation String?
  statut         StatutReferent     @default(NON_APPROUVE)
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  candidats      CandidatReferent[] @relation("ReferentToCandidat")
}

model CandidatReferent {
  candidat    Candidat @relation("CandidatToReferent", fields: [candidat_id], references: [id], onDelete: Cascade)
  candidat_id Int
  referent    Referent @relation("ReferentToCandidat", fields: [referent_id], references: [id], onDelete: Cascade)
  referent_id Int
  assigned_at DateTime @default(now())

  @@id([candidat_id, referent_id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  titre      String
  contenu    String
  est_lu     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OtpVerification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  otp        String   @db.VarChar(8)
  expires_at DateTime
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Processus {
  id               Int               @id @default(autoincrement())
  titre            String
  type             TypeProcessus     @default(VISIO_CONFERENCE)
  description      String
  statut           StatutProcessus   @default(A_VENIR)
  offre            Offre             @relation("OffreProcessus", fields: [offre_id], references: [id], onDelete: Cascade)
  offre_id         Int
  duree            Int
  ordre            Int                @default(0)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  questions        Question[]        @relation("ProcessusQuestion")
  processus_passer ProcessusPasser[] @relation("ProcessusPasserProcess")
}

model Question {
  id           Int       @id @default(autoincrement())
  label        String
  reponses     Reponse[] @relation("QuestionReponse")
  processus    Processus @relation("ProcessusQuestion", fields: [processus_id], references: [id], onDelete: Cascade)
  processus_id Int
  ordre        Int       @default(1)

  @@unique([ordre, processus_id])
}

model Reponse {
  id          Int      @id @default(autoincrement())
  label       String
  is_true     Boolean
  question    Question @relation("QuestionReponse", fields: [question_id], references: [id], onDelete: Cascade)
  question_id Int
}

model Remarque {
  id             Int         @id @default(autoincrement())
  admin          User        @relation("RemarqueAdmin", fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id       Int
  postulation    Postulation @relation("RemarquePostulation", fields: [postulation_id], references: [id], onDelete: Cascade)
  postulation_id Int
  text           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model ProcessusPasser {
  id             Int             @id @default(autoincrement())
  processus      Processus       @relation("ProcessusPasserProcess", fields: [processus_id], references: [id], onDelete: Cascade)
  processus_id   Int
  postulation    Postulation     @relation("ProcessusPasserPostulation", fields: [postulation_id], references: [id], onDelete: Cascade)
  postulation_id Int
  statut         StatutProcessusPasser @default(EN_COURS)
  score          Int             @default(0)
  lien_web       String?
  lien_fichier   String?
  lien_vision    String?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model SupportSiteRequest {
  id            Int                  @id @default(autoincrement())
  sujet         String
  contenu       String               
  emailSource   String           
  statut        SupportRequestStatus @default(EN_ATTENTE)
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  @@map("support_requests")
}