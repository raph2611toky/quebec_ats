generator client {
  provider = "prisma-client-js"
}

//PRODUCTION
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Local
// datasource db {
//    provider = "mysql"
//    url      = env("DATABASE_URL")
//  }

enum Role {
  MODERATEUR
  ADMINISTRATEUR
}

enum Status {
  CREE
  OUVERT
  FERME
}

enum Devise {
  EURO
  DOLLAR
  DOLLAR_CANADIAN
  LIVRE
  YEN
  ROUPIE
  ARIARY
}

// représente état de son postulation actuelle 
enum EtapeActuelle {
  SOUMIS
  EN_REVISION
  ACCEPTE
  REJETE
}

enum SourceSite {
  LINKEDIN
  INDEED
  JOOBLE
  FRANCETRAVAIL
  MESSAGER
  WHATSAPP
  INSTAGRAM
  TELEGRAM
  TWITTER
  QUEBEC_SITE
}

enum StatutReferent {
  APPROUVE
  NON_APPROUVE
}

enum TypeProcessus {
  TACHE
  VISIO_CONFERENCE
  QUESTIONNAIRE
  ANNULER
}

enum StatutProcessus {
  A_VENIR
  EN_COURS
  TERMINER
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String            @unique
  password        String
  phone           String
  profile         String            @default("profile.png")
  role            Role              @default(MODERATEUR)
  is_active       Boolean           @default(false)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  offres          Offre[]           @relation("UserOffres")
  otp_verfication OtpVerification[]
  remarques       Remarque[]        @relation("RemarqueAdmin")
}

model Offre {
  id                Int           @id @default(autoincrement())
  titre             String        @default("")
  user              User          @relation("UserOffres", fields: [user_id], references: [id])
  user_id           Int
  image_url         String
  description       String
  date_limite       DateTime
  status            Status
  nombre_requis     Int           @default(1)
  lieu              String
  pays              String
  type_emploi       String
  salaire           Decimal
  devise            Devise
  horaire_ouverture String
  horaire_fermeture String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  postulations      Postulation[] @relation("OffrePostulations")
  processus         Processus[]   @relation("OffreProcessus")
}

model Candidat {
  id              Int                @id @default(autoincrement())
  email           String             @unique
  nom             String
  // is_email_active, envoye email pour activé après première postulation
  // suivie progression candidat via auth mail, utilisant son mail 
  is_email_active Boolean            @default(false)
  telephone       String?
  image           String             @default("uploads/candidats/default.png")
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  postulations    Postulation[]      @relation("CandidatPostulations")
  referents       CandidatReferent[] @relation("CandidatToReferent")
}

model Postulation {
  id                Int           @id @default(autoincrement())
  candidat          Candidat      @relation("CandidatPostulations", fields: [candidat_id], references: [id])
  candidat_id       Int
  offre             Offre         @relation("OffrePostulations", fields: [offre_id], references: [id])
  offre_id          Int
  date_soumission   DateTime      @default(now())
  etape_actuelle    EtapeActuelle @default(SOUMIS)
  cv                String
  lettre_motivation String?
  source_site       SourceSite    @default(LINKEDIN)
  //représente la note globale du candidat durant tous les processus de recrutement
  note              Int           @default(0)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  remarques         Remarque[]    @relation("RemarquePostulation")

  // Contrainte d'unicité
  @@unique([candidat_id, offre_id])
}

model Referent {
  id             Int                @id @default(autoincrement())
  email          String             @unique
  nom            String
  telephone      String
  recommendation String?
  statut         StatutReferent     @default(NON_APPROUVE)
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  candidats      CandidatReferent[] @relation("ReferentToCandidat")
}

model CandidatReferent {
  candidat    Candidat @relation("CandidatToReferent", fields: [candidat_id], references: [id])
  candidat_id Int
  referent    Referent @relation("ReferentToCandidat", fields: [referent_id], references: [id])
  referent_id Int
  assigned_at DateTime @default(now())

  @@id([candidat_id, referent_id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  titre      String
  contenu    String
  est_lu     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OtpVerification {
  id         Int      @id @default(autoincrement())
  user_id    Int
  otp        String   @db.VarChar(8)
  expires_at DateTime
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Processus {
  id          Int             @id @default(autoincrement())
  titre       String
  type        TypeProcessus   @default(VISIO_CONFERENCE)
  description String
  statut      StatutProcessus @default(A_VENIR)
  offre       Offre           @relation("OffreProcessus", fields: [offre_id], references: [id])
  offre_id    Int
  //duree en minutes
  duree       Int
  // lien_visio  String?
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  questions   Question[]      @relation("ProcessusQuestion")
}

model Question {
  id           Int       @id @default(autoincrement())
  label        String
  reponses     Reponse[] @relation("QuestionReponse")
  processus    Processus @relation("ProcessusQuestion", fields: [processus_id], references: [id])
  processus_id Int
}

model Reponse {
  id          Int      @id @default(autoincrement())
  label       String
  is_true     Boolean
  question    Question @relation("QuestionReponse", fields: [question_id], references: [id])
  question_id Int
}

model Remarque {
  id             Int         @id @default(autoincrement())
  admin          User        @relation("RemarqueAdmin", fields: [admin_id], references: [id])
  admin_id       Int
  postulation    Postulation @relation("RemarquePostulation", fields: [postulation_id], references: [id])
  postulation_id Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}
